[
  {
    "objectID": "hw3.html",
    "href": "hw3.html",
    "title": "Homework 3 Control Flow Functions",
    "section": "",
    "text": "Pre-work\nLoad in the list from hw2:\n\nload(\"hw2_list.rda\")\n\n\n\nTask 1 Control Flow Practice\n\nAdd column status to each df in the list:\n\n\nbp_list[[1]]$status &lt;- character(20)\nbp_list[[2]]$status &lt;- character(10)\n\n\nNow, define the post- status according to this rule:\n\n\noptimal (≤ 120)\nborderline (120 &lt; bp ≤ 130)\nhigh (&gt; 130)\n\nFirst, for the treatment group:\n\nfor (i in 1:20) {\n  post_bp &lt;- bp_list$treatment$post_bp[i]\n  if (post_bp &gt; 130) status &lt;- 'high'\n  else if (post_bp &gt; 120) status &lt;- 'borderline'\n  else status &lt;- 'optimal'\n  bp_list$treatment$status[i] &lt;- status\n}\n\n\nNext, continue and replicate for the placebo group:\n\n\nfor (i in 1:10) {\n  post_bp &lt;- bp_list$placebo$post_bp[i]\n  if (post_bp &gt; 130) status &lt;- 'high'\n  else if (post_bp &gt; 120) status &lt;- 'borderline'\n  else status &lt;- 'optimal'\n  bp_list$placebo$status[i] &lt;- status\n}\n\n\n\nTask 2 Function Writing\n\nWrite a function to do the above and more, nicely.\n\n\n\naccept an argument of a list with two dfs, treatment and placebo, no defaults.\naccept an argument of an R function, default of ‘mean’.\nfind statistic of interest for pre,post,diff cols of both dfs.\nreturn the six values with good names.\n\n\nupdate_status &lt;- function(my_list, #list with two dfs, treatment and placebo\n                          my_stat = 'mean' #desired action to execute, ASSUMES valid string \"var\", \"sd\", \"min\", \"max\", or \"mean\"\n                          ) {\n  \n  #error checking for my_list\n  if (\n    (!is.list(my_list)) |\n    (names(my_list[1]) != 'treatment') |\n    (names(my_list[2]) != 'placebo') |\n    (!is.data.frame(my_list$treatment)) |\n    (!is.data.frame(my_list$placebo)) )\n    stop(\"my_list is not a list of 2 dfs treatment, placebo\")\n  \n  #exit on NA for my_stat\n  if (is.na(my_stat)) stop(\"my_stat may not be NA\")\n  \n  #simple error checking for stat\n  if (\n    (my_stat != 'mean') &\n    (my_stat != 'var') &\n    (my_stat != 'sd') &\n    (my_stat != 'min') &\n    (my_stat != 'max') )\n    stop(\"stat function not in valid list of mean,var,sd,min,max\")\n  \n  #convert string to function call\n  my_function &lt;- get(my_stat)\n  \n  #calculate stats\n  treatment_pre_bp_stat &lt;- my_function(my_list$treatment$pre_bp)\n  treatment_post_bp_stat &lt;- my_function(my_list$treatment$post_bp)\n  treatment_diff_bp_stat &lt;- my_function(my_list$treatment$diff_bp)\n  placebo_pre_bp_stat &lt;- my_function(my_list$placebo$pre_bp)\n  placebo_post_bp_stat &lt;- my_function(my_list$placebo$post_bp)\n  placebo_diff_bp_stat &lt;- my_function(my_list$placebo$diff_bp)\n  \n  #create proper labels\n  my_labels &lt;- paste(my_stat,\n                    c('treatment_pre_bp',\n                      'treatment_post_bp',\n                      'treatment_diff_bp',\n                      'placebo_pre_bp',\n                      'placebo_post_bp',\n                      'placebo_diff_bp'),\n                    sep = ' ' )\n  \n  #combine stats and labels into one vector\n  my_stat_vector &lt;- c(treatment_pre_bp_stat,\n                      treatment_post_bp_stat,\n                      treatment_diff_bp_stat,\n                      placebo_pre_bp_stat,\n                      placebo_post_bp_stat,\n                      placebo_diff_bp_stat)\n  names(my_stat_vector) &lt;- my_labels\n  \n  #return the full stat vector of 6 values\n  return(my_stat_vector)\n  \n}\n\n\nNow, finally, we call the function for the following values of stat:\n\n\nunspecified\nvar\nsd\nmin\nmax\n\n\n#note: I hoped to do this with a for loop, iterating calls using a vector of strings\n#however, i kept getting unexpected results, with errors about NA that would not occur\n#if I typed the same direct into console. So, manual code here.\nmy_stat_results &lt;- list()\n\nmy_stat_results[['unspecified']] &lt;- update_status(bp_list)\nmy_stat_results[['var']] &lt;- update_status(bp_list,'var')\nmy_stat_results[['sd']] &lt;- update_status(bp_list,'sd')\nmy_stat_results[['min']] &lt;- update_status(bp_list,'min')\nmy_stat_results[['max']] &lt;- update_status(bp_list,'max')\n\n#my_stat\n#update_status(bp_list)\n\n#for (i in my_stat_calls) {\n  #print(i)\n  #typeof(i)\n  #str(i)\n  #my_stat_results[i] &lt;- update_status(bp_list,my_stat_calls[i])\n#}\n#names(my_stat_results) &lt;- my_stat_calls\n\nmy_stat_results\n\n$unspecified\n mean treatment_pre_bp mean treatment_post_bp mean treatment_diff_bp \n                131.60                 125.95                   5.65 \n   mean placebo_pre_bp   mean placebo_post_bp   mean placebo_diff_bp \n                131.90                 128.90                   3.00 \n\n$var\n var treatment_pre_bp var treatment_post_bp var treatment_diff_bp \n             75.72632              78.99737             117.81842 \n   var placebo_pre_bp   var placebo_post_bp   var placebo_diff_bp \n            149.87778             124.98889             341.33333 \n\n$sd\n sd treatment_pre_bp sd treatment_post_bp sd treatment_diff_bp \n            8.702087             8.888046            10.854419 \n   sd placebo_pre_bp   sd placebo_post_bp   sd placebo_diff_bp \n           12.242458            11.179843            18.475209 \n\n$min\n min treatment_pre_bp min treatment_post_bp min treatment_diff_bp \n                  115                   114                   -24 \n   min placebo_pre_bp   min placebo_post_bp   min placebo_diff_bp \n                  114                   105                   -21 \n\n$max\n max treatment_pre_bp max treatment_post_bp max treatment_diff_bp \n                  151                   146                    21 \n   max placebo_pre_bp   max placebo_post_bp   max placebo_diff_bp \n                  152                   143                    33"
  }
]